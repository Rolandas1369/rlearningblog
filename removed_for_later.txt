Test FizzBuzz with TDD

Write failing test, make failing test pass, add littlest change in code possible, make test fail, make test pass repeat.


51c342babba9a829675f84ed575787ca

FizzBuzzTest.py


Intresting approch to learn TDD

Start learning TDD was hard for me, but this books approach is something interesting, we can see learning content is displayed as a story. Make a django project don't forget to start it, and test it in new functional_test.py file.

75025ef8f7d705b35e35f63b126cbb11

functional_test.py


Django test

Edit app/test.py and run $ python manage.py test

1bce997d05d8bac3afebd8a8ab4279a0

tests.py


Test home page, read errors

[pre]
Run code from gist. Error is ...
ERROR: test_root_url_resolves_to_home_page_ (lists.tests.HomePageTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/rolandas/Desktop/Programavimas/TestBook/superlists/lists/tests.py", line 9, in test_root_url_resolves_to_home_page_
    found = resolve('/')
  File "/home/rolandas/Desktop/Programavimas/TestBook/env/lib/python3.6/site-packages/django/urls/base.py", line 25, in resolve
    return get_resolver(urlconf).resolve(path)
  File "/home/rolandas/Desktop/Programavimas/TestBook/env/lib/python3.6/site-packages/django/urls/resolvers.py", line 575, in resolve
    raise Resolver404({'tried': tried, 'path': new_path})
django.urls.exceptions.Resolver404: {'tried': [[<URLResolver <URLPattern list> (admin:admin) 'admin/'>]], 'path': ''}

Accessed
found = resolve('/')
Got error 404 not found, this means we need to add '/' url to urls.py.
raise Resolver404({'tried': tried, 'path': new_path})
[/pre]

35bd416a1bb01574643f996dbcb7543c

tests.py



Add more tests to functional_test.py

[pre]
Run test, get this error
Traceback (most recent call last):
File "/home/rolandas/Desktop/Programavimas/TestBook/superlists/lists/tests.py", line 16, in test_home_page_returns_correct_html
    html = response.content.decode('utf8')
AttributeError: 'NoneType' object has no attribute 'content'

No content
add this to views for solving first failing test.
def home_page(request):
    return HttpResponse()

Run tests again
 File "/home/rolandas/Desktop/Programavimas/TestBook/superlists/lists/tests.py", line 17, in test_home_page_returns_correct_html
    self.assertTrue(html.startswith('<html>'))
AssertionError: False is not true
No <'html'> tag we need to add "<html>"

def home_page(request):
    return HttpResponse('<html>')

run tests again
  File "/home/rolandas/Desktop/Programavimas/TestBook/superlists/lists/tests.py", line 18, in test_home_page_returns_correct_html
    self.assertIn('<title>To-Do lists</title>', html)
AssertionError: '<title>To-Do lists</title>' not found in '<html>'

No "<title>" in "<html>"

def home_page(request):
    return HttpResponse('<html><title>To-Do lists</title>')

run test again
  File "/home/rolandas/Desktop/Programavimas/TestBook/superlists/lists/tests.py", line 19, in test_home_page_returns_correct_html
    self.assertTrue(html.endswith('</html>'))
AssertionError: False is not true


def home_page(request):
    return HttpResponse('<html><title>To-Do lists</title></html>')

all tests are ok
[/pre]


Add more tests to functional_test.py

Adding more cases what user can expect in app.

c11f0db04e34b22b14d30e5b794f8415
functional_test.py

Check for template usage
[pre]
    def test_uses_home_page_(self):
        response = self.client.get('/')
        self.assertTemplateUsed(response, 'home.html')
[/pre]


Make plan for development using test
It is good to right story throught test, what do user expect to see on some actions
c11f0db04e34b22b14d30e5b794f8415
functional_test.py